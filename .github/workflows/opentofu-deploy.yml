# .github/workflows/opentofu-deploy.yml
name: OpenTofu Deploy (simple)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy to
        required: true
        default: stage
        type: choice
        options: [stage, prod]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC to AWS
      contents: read   # Required to checkout the repository
    environment:
      name: ${{ inputs.environment }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: 1.9.0 # Ensure this is a valid OpenTofu version

    - name: Determine AWS Role ARN
      id: aws_role
      run: |
        if [[ "${{ inputs.environment }}" == "stage" ]]; then
          echo "role_arn=${{ secrets.AWS_ROLE_STAGE_ARN }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.environment }}" == "prod" ]]; then
          echo "role_arn=${{ secrets.AWS_ROLE_PROD_ARN }}" >> $GITHUB_OUTPUT
        else
          echo "::error::Invalid environment: ${{ inputs.environment }}"
          exit 1
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ steps.aws_role.outputs.role_arn }}
        aws-region: eu-west-1

    - name: tofu init
      run: |
        tofu init -reconfigure \
          -backend-config="bucket=merapar-terraform-state-${{ inputs.environment }}" \
          -backend-config="key=dynamic-string/${{ inputs.environment }}/terraform.tfstate" \
          -backend-config="dynamodb_table=merapar-terraform-locks-${{ inputs.environment }}"

    # (optional) import existing DynamoDB lock table if present
    # This step might be unnecessary if backend is configured correctly from the start.
    # Also, the resource name 'aws_dynamodb_table.terraform_locks' would need to match
    # a resource defined in your main configuration if you were to manage it there.
    # - name: Import lock table (if exists)
    #   run: |
    #     ENV_SUFFIX=${{ inputs.environment }}
    #     TABLE_NAME="merapar-terraform-locks-${ENV_SUFFIX}"
    #     # Check if the table exists
    #     if aws dynamodb describe-table --table-name "${TABLE_NAME}" >/dev/null 2>&1; then
    #       # Attempt to import. This assumes a resource named 'terraform_locks' exists in your .tf files.
    #       # Adjust the local resource name if it's different (e.g., aws_dynamodb_table.locks)
    #       echo "Attempting to import DynamoDB table ${TABLE_NAME} if not already in state."
    #       # tofu import aws_dynamodb_table.terraform_locks "${TABLE_NAME}" || echo "Import failed or resource already in state."
    #     else
    #       echo "DynamoDB table ${TABLE_NAME} does not exist, skipping import."
    #     fi

    - name: tofu plan
      run: |
        tofu plan \
          -var="environment=${{ inputs.environment }}" \
          -out=tfplan

    - name: Generate checksum
      run: sha256sum tfplan > tfplan.sha256

    - name: Show plan (human‑readable)
      run: tofu show tfplan

    # If your environment is protected you’ll get an approval gate here.
    - name: tofu apply
      run: |
        sha256sum -c tfplan.sha256
        tofu apply -auto-approve tfplan
