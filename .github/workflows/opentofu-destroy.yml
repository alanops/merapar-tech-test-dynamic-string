# .github/workflows/opentofu-destroy.yml
name: OpenTofu Destroy

# ─── Trigger: manual “Run workflow” button ──────────────────────────────────────
on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to destroy
        required: true
        default: stage
        type: choice
        options: [stage, prod]

# ─── Jobs ───────────────────────────────────────────────────────────────────────
jobs:
  destroy:
    # Optional extra guard (redundant but harmless)
    if: github.event_name == 'workflow_dispatch'

    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC to AWS
      contents: read   # Required to checkout the repository

    # Hook into GitHub Environments so you get the approval gate
    environment:
      name: ${{ inputs.environment }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: 1.9.0 # Ensure this is a valid OpenTofu version

    - name: Determine AWS Role ARN
      id: aws_role
      run: |
        if [[ "${{ inputs.environment }}" == "stage" ]]; then
          echo "role_arn=${{ secrets.AWS_ROLE_STAGE_ARN }}" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.environment }}" == "prod" ]]; then
          echo "role_arn=${{ secrets.AWS_ROLE_PROD_ARN }}" >> $GITHUB_OUTPUT
        else
          echo "::error::Invalid environment: ${{ inputs.environment }}"
          exit 1
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ steps.aws_role.outputs.role_arn }}
        aws-region: eu-west-1

    - name: tofu init
      run: |
        tofu init -reconfigure \
          -backend-config="bucket=merapar-terraform-state-${{ inputs.environment }}" \
          -backend-config="key=dynamic-string/${{ inputs.environment }}/terraform.tfstate" \
          -backend-config="dynamodb_table=merapar-terraform-locks-${{ inputs.environment }}"

    # Show a destroy plan first (great for the approval step)
    - name: tofu plan (destroy mode)
      run: |
        tofu plan \
          -destroy \
          -var="environment=${{ inputs.environment }}" \
          -out=tfplan-destroy
        tofu show tfplan-destroy

    # GitHub pauses here if the environment requires approval
    - name: tofu destroy
      run: |
        echo "About to destroy resources in environment: ${{ inputs.environment }}"
        # Applying the destroy plan ensures you destroy what was planned.
        # If you prefer to re-calculate, use:
        # tofu destroy -auto-approve -var="environment=${{ inputs.environment }}"
        tofu apply -auto-approve tfplan-destroy
